set number
set relativenumber
set autoread "to auto refresh file if changed
"uncomment the next two lines to set cursorline and cursorcolumn
"set cursorline
"set cursorcolumn
"set formatoptions=l
"line break on 500 characters
"set lbr
"set tc=500
set nocompatible
set pastetoggle=<F2>
"changing set paste and set nopaste easily using <F2> 

"set noswapfile
set virtualedit=onemore "allow cursor to go to end of the line
set wildmenu "autocomplete menu
"next line is for spelling check;use <F6>
map <special> <F6> :setlocal spell! spelllang=en_US<CR>    

"use ctrl+l to directly jump to <++> 
inoremap <special>  <Esc>/<++><Enter>"0c4l 

"formatting
set expandtab
set tabstop=4 "setting tab as four spaces
set softtabstop=4
set shiftwidth=4
set omnifunc=csscomplete#CompleteCSS "for css auto complete
"mapped css auto completion key
set omnifunc=htmlcomplete#CompleteTags "for html auto complete

nnoremap gf <c-w>gf
"gf open files in current window and <c-w>gf in new window here i mapped gf to open file in new window
"the next line  is used to map jj as an alternative to escape key
inoremap <special> jj <ESC>
"useful for handling the permission denied error by using :W
command W w !sudo dd of=% 

"uncomment the following three lines to set a highlighted column line
"set noexpandtab
"set colorcolumn=150
"highlight ColorColumn ctermbg=blue

"html tags shortcuts
" autocmd Filetype html inoremap ;i <em></em><Space><++><Esc>FeT>i
" autocmd Filetype html inoremap ;b <b></b><Space><++><Esc>FbT>i
" autocmd Filetype html inoremap ;p <p><Enter></p><Space><++><Esc>1kA<Enter>
" autocmd Filetype html inoremap ;h <html> <Enter> <head> <Enter></head><Enter> <body> <Enter> </body> <Enter></html><Esc>2kA
" autocmd Filetype html inoremap ;d <div></div><Space><Esc>FvT>i
" autocmd Filetype html inoremap ;s <span></span><Space><++><Esc>FnT>i
" autocmd Filetype html inoremap ;a <a href=""><++></a><Space><++><Esc>F"i

"for compiling c++ program  directly in vim using <F9> in normal mode 
nnoremap <special> <F9> :!g++ -std=c++11 % -Wall -g -o %.out && ./%.out<CR>

"cpp shortcuts
autocmd Filetype cpp inoremap ;h #include <bits/stdc++.h><Enter> using namespace std; <Enter>typedef long long int ll;<Enter>typedef unsigned long long int ull;<Enter>typedef pair <int,int> pt;<Enter>typedef pair <int,string> ps;<Enter>#define make_pair mp<Enter> int main() <Enter> { <Enter>int t;<Enter>cin>>t;<Enter>while(t!=0){<Enter>t--;<Enter>}<Enter>cerr<<"Time elapsed"<<1.0*clock()/CLOCKS_PER_SEC<<"s\n";<Enter>return 0;<Enter>}<Esc>5kA<Enter> 
    " autocmd Filetype cpp inoremap ;f int (<++>) <Enter> { <Enter><++><Enter>}<Enter><++><Esc>4kf(i
autocmd FileType cpp inoremap ;f for(int i=0;i<n;i++) <Enter> {<Enter>}
"for compiling python program inside  vim using <F9>
"set autowritennoremap <special> <F9> :exec '!python' shellescape(@%, 1)<cr>

" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim
" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any ther options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark
" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Show matching brackets when text indicator is over them
set showmatch 

" A buffer becomes hidden when it is abandoned
set hid

" Highlight search results
set hlsearch
nnoremap <F4> :set hlsearch!<CR>

" Height of the command bar
"set cmdheight=2

" Makes search act like search in modern browsers
set incsearch 

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
":help key-notation to know meaning of key shortcuts

" How many tenths of a second to blink when matching brackets
"set mat=2

"  " no longer press shift to enter commands
" nnoremap ; :
" nnoremap : ;
" vnoremap ; :
" vnoremap : ;

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
"  let Vundle manage Vundle, required
 Plugin 'VundleVim/Vundle.vim'
 Plugin 'mhartington/oceanic-next' "oceanic-next colorscheme
 Plugin 'lifepillar/vim-solarized8' "solarized colorscheme
 Plugin 'scrooloose/nerdtree'
 " Plugin 'Valloric/YouCompleteMe' "auto complete in vim
 Plugin 'ycm-core/YouCompleteMe'
 Plugin 'severin-lemaignan/vim-minimap' "vim minimap
 Plugin 'ervandew/supertab'
 Plugin 'godlygeek/tabular'
 Plugin 'pangloss/vim-javascript'
 Plugin 'maxmellon/vim-jsx-pretty'
 Plugin 'editorconfig/editorconfig-vim' "for .editorconfig file
 Plugin 'airblade/vim-gitgutter' "real time git diff
 Plugin 'Townk/vim-autoclose' "auto-completion of brackets Plugin 'mattn/emmet-vim'
 Plugin 'vim-airline/vim-airline' "displaying details at top and bottom 
 Plugin 'Valloric/MatchTagAlways'
 Plugin 'airbnb/javascript'
 Plugin 'alvan/vim-closetag'
 Plugin 'w0rp/ale' "syntax checker
 Plugin 'ctrlpvim/ctrlp.vim' "for finding files inside vim 
 Plugin 'junegunn/fzf.vim'   "better finder than CtrlP
 Plugin 'tpope/vim-fugitive' "easily solving merge conflicts
 Plugin 'tpope/vim-commentary' "for commenting files
 Plugin 'tpope/vim-repeat'  "repeating last command using dot (.)
 Plugin 'tpope/vim-surround' "for surrounding brackets quotes
 Plugin 'yggdroot/indentline' "indenting lines
 Plugin 'yuttie/comfortable-motion.vim' "for smooth scrolling
 Plugin 'ap/vim-css-color' "for css highlighting colour
 Plugin 'mustache/vim-mustache-handlebars' "for .hbs highlighting
 Plugin 'plasticboy/vim-markdown' "for markdown
 Plugin 'prettier/vim-prettier' 
 Plugin 'sjl/gundo.vim' 
 Plugin 'mhinz/vim-startify' "fancy start screen for vim
 "Plugin 'mileszs/ack.vim'  
 "Plugin 'majutsushi/tagbar'
 Plugin 'terryma/vim-multiple-cursors' "for multiple cursors Plugin
 Plugin 'epilande/vim-react-snippets' "react js snippets
 " Ultisnips
 Plugin 'SirVer/ultisnips' "snippets for vim
 Plugin 'Glench/Vim-Jinja2-Syntax' "jing2 highlighting for vim.
 Plugin 'Yggdroot/indentLine' "indendation with vertical lines
 " Trigger configuration (Optional)
 let g:UltiSnipsExpandTrigger="<C-l>"
 "All of your Plugins must be added before the following line
 call vundle#end()            " required
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" see :h vundle for more details or wiki for FAQ

"ejs formatting
au BufNewFile,BufRead *.ejs set filetype=html

"------------------------NERDTREE-SETUP-------------------------------------------------
"--------------------------------------------------------------------------------------
autocmd vimenter * NERDTree "open a NERDTree automatically when vim starts up

"open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1
nmap <F3> :NERDTreeToggle<CR>
"let g:NERDTreeWinSize=35 "sets the size of nerdtree window
"----------------------------------------------------------------------------------------------------------

"----------------oceanic-next colorscheme setup----------------------------------
" Theme
 syntax enable
" for vim 7
 set t_Co=256
 let g:airline_theme='oceanicnext'
"--------------------------------------------------------------------------------
set background=light
colorscheme OceanicNext "solarized8_flat
"You can change colorscheme by selecting any value given  in
"/usr/share/vim/vim74/colors

"-------------------------javascript-highlighting(vim-javascript setup)----------------------------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax
augroup END
"--------------------------------------------------------------------------------------------------------------------

"------------------------jsx highlighting plugin setup------------------------
let g:vim_jsx_pretty_colorful_config = 1 " default 0
"-----------------------------------------------------------------------------------------

"-----------------------emmet-vim
"setup-------------------------------------------------------------
let g:user_emmet_mode='a' 
"-----------------------------------------------------------------------

"----------------------------airline setup--------------------------
let g:airline#extensions#tabline#enabled = 1 "to display buffers line on top
"-----------------------------------------------------------------------------

"------------------------------matchingTags setup--------------------------------
let g:mta_use_matchparen_group = 1
let g:mta_use_matchparen_group = 1
let g:mta_set_default_matchtag_color = 1
let g:mta_filetypes = { 'javascript.jsx': 1, 'html' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1,}
"--------------------------------------------------------------------------------
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
"
let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'

"-----------------mutiple cursor set up-----------
if !has('gui_running')
  map "in Insert mode, type Ctrl+v Alt+n here" <A-n>
endif

" -----------------vim commentary setup-------------
autocmd FileType javascript.jsx setlocal commentstring={/*\ %s\ */}
" -----------------------------------------------------

"-------------------indentlines-----------------------
let g:indentLine_setColors = 0
let g:indentLine_char = '|'
let g:indentLine_enabled = 0
"---------------------------------------------

"---------------majutsushi/tagbar setup------------------------------
nmap <F8> :TagbarToggle<CR>
"---------

"----------------------comfortable-scrolling-------------------
let g:comfortable_motion_scroll_down_key = "j"
let g:comfortable_motion_scroll_up_key = "k"
"----------------------------------------------------

let g:ackprg = "ag --vimgrep"
"---------ale-setup----------------
let g:ale_sign_column_always = 1 "for always showing the side error column line
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'jsx': ['eslint'],
\  'cpp': ['gcc']
\}
"fixes errors on saving
let g:ale_fixers = {
\  'javascript': ['eslint'],
\  'jsx': ['eslint']
\}
"let g:ale_fix_on_save = 1
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>
let g:ale_cpp_gcc_executable='gcc'
let g:ale_cpp_gcc_options='-std=c++14 -Wall'

"Indent Lines vim
let g:indentLine_color_term = 170
let g:indentLine_char = '┆'
let g:indentLine_bgcolor_term = 202
let g:indentLine_bgcolor_gui = '#FF5F00'

"---------------------plasticboy-markdown setup--------------
let g:vim_markdown_auto_insert_bullets = 1
"------------------ultisnips-setup-----------------

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-a>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
